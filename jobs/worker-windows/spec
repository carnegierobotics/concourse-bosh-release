---
name: worker-windows

description: >
  The 'worker' nodes are what actually run Concourse workloads (builds,
  resource checking, etc). They register with Concourse via the SSH worker
  gateway running on the 'web' nodes.

templates:
  start.ps1: bin/start.ps1
  pre-start.ps1.erb: bin/pre-start.ps1
  env.ps1.erb: config/env.ps1
  worker_gateway_host_key.pub.erb: config/worker_gateway_host_key.pub

packages:
- concourse-windows

consumes:
- name: web
  type: web
  optional: true

properties:
  log_level:
    env: CONCOURSE_LOG_LEVEL
    description: |
      The log level for the worker. When set to debug, you'll see a lot more
      information.
    default: info

  team:
    env: CONCOURSE_TEAM
    description: |
      Register the worker for a single team.

      If not specified, the worker will be shared across all teams.

  tags:
    env: CONCOURSE_TAG
    description: |
      An array of tags to advertise for each worker.
    example: [special]

  http_proxy_url:
    env: http_proxy
    description: |
      Proxy to use for outgoing http requests from containers.

  https_proxy_url:
    env: https_proxy
    description: |
      Proxy to use for outgoing https requests from containers.

  no_proxy:
    env: no_proxy
    description: |
      A list domains and IPs with optional port for which the proxy should be
      bypassed.
    example: [localhost, 127.0.0.1, example.com, 'domain.com:8080']

  drain_timeout:
    description: |
      Maximum wait time in Go duration format (1m = 1 minute) for worker drain
      to be finished. Only applies when worker is getting shutdown.

      If not specified, it will be indefinite.
    default: 1h

  ephemeral:
    env: CONCOURSE_EPHEMERAL
    description: |
      If set, the worker will immediately disappear upon stalling.
    default: false

  garden.request_timeout:
    env: CONCOURSE_GARDEN_REQUEST_TIMEOUT
    description: |
      How long to wait for requests to Garden to complete, in Go duration format (48h = 48 hours).
      0 means no timeout.
    example: 5m

  sweep_interval:
    env: CONCOURSE_SWEEP_INTERVAL
    description: |
      Interval on which to destroy containers and volumes marked for garbage
      collection.
    default: 30s

  worker_gateway.hosts:
    env: CONCOURSE_TSA_HOST
    description: |
      Addresses (host:port) of TSA servers to register with.

      If not specified, the `web` link is used.
    example: ["localhost:2222", "example.com"]

  worker_gateway.host_public_key:
    env_file: CONCOURSE_TSA_PUBLIC_KEY
    description: >
      Public key to verify for the TSA server.

      If not specified, the `web` link is used.
    example: 'ssh-rsa ...'

  worker_gateway.worker_key:
    type: ssh
    env_fields: {private_key: {env_file: CONCOURSE_TSA_WORKER_PRIVATE_KEY}}
    description: |
      SSH key to use when authenticating with the TSA.
    example:
      private_key: |
        -----BEGIN RSA PRIVATE KEY-----
        ...
        -----END RSA PRIVATE KEY-----
      public_key: 'ssh-rsa ...'

  worker_gateway.rebalance_interval:
    env: CONCOURSE_REBALANCE_INTERVAL
    description: |
      The interval on which the worker will connect to a new SSH gateway and
      drain the old connection. This has the effect of rebalancing the
      forwarded workers across the SSH gateways over time.

      If not specified, the worker will not rebalance over time, and instead
      stick with whichever SSH gateway it initially connected to.
    default: 4h

  baggageclaim.driver:
    env: CONCOURSE_BAGGAGECLAIM_DRIVER
    description: |
      Driver to use for the volume store. One of detect, overlay, btrfs, or naive.
    default: detect

  baggageclaim.bind_port:
    env: CONCOURSE_BAGGAGECLAIM_BIND_PORT
    description: |
      Port on which Baggageclaim should listen for HTTP traffic.
    default: 7788

  external_garden_url:
    env: CONCOURSE_EXTERNAL_GARDEN_URL
    description: |
      API endpoint of an externally managed Garden server to use instead of
      running the embedded Garden server.
